mod subparsers {
    use py_arg_parse::argument_parser::{ArgumentParser, SubparserError, SubparserManager};
    use py_arg_parse::builder::ArgumentAdder;
    #[test]
    fn conflicting_names_same_subparser_manager() {
        let subparser_a = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--foo"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let subparser_b = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--bar"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let manager = SubparserManager::default();
        assert_eq!(
            manager
                .add_parser("subparser", subparser_a, None)
                .unwrap()
                .add_parser("subparser", subparser_b, None)
                .unwrap_err(),
            SubparserError::DuplicateNameInParser("subparser".to_string())
        )
    }

    #[test]
    fn conflicting_names_different_subparser() {
        let subparser_a = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--foo"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let manager_a = SubparserManager::default()
            .add_parser("subparser", subparser_a, None)
            .unwrap();
        let subparser_b = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--bar"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();

        let manager_b = SubparserManager::default()
            .add_parser("subparser", subparser_b, None)
            .unwrap();
        let parser = ArgumentParser::default();
        assert_eq!(
            parser
                .add_subparsers(vec![manager_a, manager_b])
                .unwrap_err(),
            SubparserError::DupblicateNameAcrossParsers("subparser".to_string())
        )
    }

    #[test]
    fn basic_subparsers() {
        let subparser_a = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--foo"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["--bar"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let subparser_b = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--faz"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["--bat"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let manager = SubparserManager::default()
            .add_parser("sub_a", subparser_a, None)
            .unwrap()
            .add_parser("sub_b", subparser_b, None)
            .unwrap();
        let mut parent = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--tar"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["you"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_subparsers(vec![manager])
            .unwrap();
        let namespace = parent
            .parse_args(Some(vec![
                "b".to_string(),
                "--tar".to_string(),
                "c".to_string(),
                "sub_a".to_string(),
                "--foo".to_string(),
                "d".to_string(),
                "--bar".to_string(),
                "e".to_string(),
            ]))
            .unwrap();
        assert_eq!(
            namespace.get_one_value::<String>("you").unwrap(),
            "b".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("tar").unwrap(),
            "c".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("foo").unwrap(),
            "d".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("bar").unwrap(),
            "e".to_string()
        );

        let namespace = parent
            .parse_args(Some(vec![
                "--tar".to_string(),
                "c".to_string(),
                "b".to_string(),
                "sub_b".to_string(),
                "--bat".to_string(),
                "d".to_string(),
                "--faz".to_string(),
                "e".to_string(),
            ]))
            .unwrap();
        assert_eq!(
            namespace.get_one_value::<String>("you").unwrap(),
            "b".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("tar").unwrap(),
            "c".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("bat").unwrap(),
            "d".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("faz").unwrap(),
            "e".to_string()
        );
    }

    #[test]
    fn multi_level() {
        let subparser_a_a = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--boo"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["--bao"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let subparser_a_b = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--floo"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["--par"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let manager_a = SubparserManager::default()
            .add_parser("sub_a_a", subparser_a_a, None)
            .unwrap()
            .add_parser("sub_a_b", subparser_a_b, None)
            .unwrap();
        let subparser_a = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--foo"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["--bar"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_subparsers(vec![manager_a])
            .unwrap();

        let subparser_b_a = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--koo"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["--gar"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let subparser_b_b = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--bre"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["--hig"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap();
        let manager_b = SubparserManager::default()
            .add_parser("sub_b_a", subparser_b_a, None)
            .unwrap()
            .add_parser("sub_b_b", subparser_b_b, None)
            .unwrap();
        let subparser_b = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--faz"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["--bat"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_subparsers(vec![manager_b])
            .unwrap();
        let manager = SubparserManager::default()
            .add_parser("sub_a", subparser_a, None)
            .unwrap()
            .add_parser("sub_b", subparser_b, None)
            .unwrap();
        let mut parent = ArgumentParser::default()
            .add_argument::<&str>(
                vec!["--tar"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_argument::<&str>(
                vec!["you"],
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            )
            .unwrap()
            .add_subparsers(vec![manager])
            .unwrap();
        let namespace = parent
            .parse_args(Some(vec![
                "b".to_string(),
                "--tar".to_string(),
                "c".to_string(),
                "sub_a".to_string(),
                "--foo".to_string(),
                "d".to_string(),
                "--bar".to_string(),
                "e".to_string(),
                "sub_a_a".to_string(),
                "--bao".to_string(),
                "f".to_string(),
                "--boo".to_string(),
                "g".to_string(),
            ]))
            .unwrap();
        assert_eq!(
            namespace.get_one_value::<String>("you").unwrap(),
            "b".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("tar").unwrap(),
            "c".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("foo").unwrap(),
            "d".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("bar").unwrap(),
            "e".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("boo").unwrap(),
            "g".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("bao").unwrap(),
            "f".to_string()
        );
        let namespace = parent
            .parse_args(Some(vec![
                "b".to_string(),
                "--tar".to_string(),
                "c".to_string(),
                "sub_a".to_string(),
                "--foo".to_string(),
                "d".to_string(),
                "--bar".to_string(),
                "e".to_string(),
                "sub_a_b".to_string(),
                "--par".to_string(),
                "f".to_string(),
                "--floo".to_string(),
                "g".to_string(),
            ]))
            .unwrap();
        assert_eq!(
            namespace.get_one_value::<String>("you").unwrap(),
            "b".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("tar").unwrap(),
            "c".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("foo").unwrap(),
            "d".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("bar").unwrap(),
            "e".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("floo").unwrap(),
            "g".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("par").unwrap(),
            "f".to_string()
        );

        let namespace = parent
            .parse_args(Some(vec![
                "b".to_string(),
                "--tar".to_string(),
                "c".to_string(),
                "sub_b".to_string(),
                "--faz".to_string(),
                "d".to_string(),
                "--bat".to_string(),
                "e".to_string(),
                "sub_b_a".to_string(),
                "--gar".to_string(),
                "f".to_string(),
                "--koo".to_string(),
                "g".to_string(),
            ]))
            .unwrap();
        assert_eq!(
            namespace.get_one_value::<String>("you").unwrap(),
            "b".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("tar").unwrap(),
            "c".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("faz").unwrap(),
            "d".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("bat").unwrap(),
            "e".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("koo").unwrap(),
            "g".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("gar").unwrap(),
            "f".to_string()
        );

        let namespace = parent
            .parse_args(Some(vec![
                "b".to_string(),
                "--tar".to_string(),
                "c".to_string(),
                "sub_b".to_string(),
                "--faz".to_string(),
                "d".to_string(),
                "--bat".to_string(),
                "e".to_string(),
                "sub_b_b".to_string(),
                "--bre".to_string(),
                "f".to_string(),
                "--hig".to_string(),
                "g".to_string(),
            ]))
            .unwrap();
        assert_eq!(
            namespace.get_one_value::<String>("you").unwrap(),
            "b".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("tar").unwrap(),
            "c".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("faz").unwrap(),
            "d".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("bat").unwrap(),
            "e".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("bre").unwrap(),
            "f".to_string()
        );
        assert_eq!(
            namespace.get_one_value::<String>("hig").unwrap(),
            "g".to_string()
        );
    }

    #[test]
    fn parse_known_arg() {
        todo!()
    }
}
